{"ast":null,"code":"var _jsxFileName = \"/Users/felix/Projekte/Web-Dev/TechLabs/100-DIB/ss23-drop-in-to-berlin/dib/src/components/RestList.js\",\n  _s = $RefreshSig$();\nimport { useState, useContext, useEffect } from \"react\";\nimport RestContext from \"../context/RestContext\";\nimport RestCard from \"./RestCard\";\nimport GetRandomIndexes from \"../util/GetRandomIndexes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RestList() {\n  _s();\n  const {\n    restaurants,\n    dataFetched\n  } = useContext(RestContext);\n  const [displayedRestaurants, setDisplayedRestaurants] = useState([]);\n  const chooseRandomRestaurants = amount => {\n    try {\n      const restaurantCount = restaurants.length;\n      const randomIndexes = GetRandomIndexes(restaurantCount, amount);\n      const randomRestaurants = randomIndexes.map(index => restaurants[index]);\n      setDisplayedRestaurants(randomRestaurants);\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n    }\n  };\n  useEffect(() => {\n    chooseRandomRestaurants(4);\n  }, [dataFetched]);\n  // useEffect(() => {\n  //   chooseRandomRestaurants(4);\n  // }, [chooseRandomRestaurants]);\n  //is it better to call fetchBooks in app, or in context?\n\n  const renderedList = displayedRestaurants.map(rest => {\n    console.log(rest.photos[0].html_attributions);\n    return /*#__PURE__*/_jsxDEV(RestCard, {\n      rest: rest\n    }, rest.reference, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: renderedList.length > 0 ? renderedList : \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(RestList, \"FaPu5Rpld4AZcw5d8UG5296tZ3U=\");\n_c = RestList;\nexport default RestList;\nvar _c;\n$RefreshReg$(_c, \"RestList\");","map":{"version":3,"names":["useState","useContext","useEffect","RestContext","RestCard","GetRandomIndexes","jsxDEV","_jsxDEV","RestList","_s","restaurants","dataFetched","displayedRestaurants","setDisplayedRestaurants","chooseRandomRestaurants","amount","restaurantCount","length","randomIndexes","randomRestaurants","map","index","error","console","renderedList","rest","log","photos","html_attributions","reference","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/Users/felix/Projekte/Web-Dev/TechLabs/100-DIB/ss23-drop-in-to-berlin/dib/src/components/RestList.js"],"sourcesContent":["import { useState, useContext, useEffect } from \"react\"\nimport RestContext from \"../context/RestContext\"\nimport RestCard from \"./RestCard\"\nimport GetRandomIndexes from \"../util/GetRandomIndexes\"\n\nfunction RestList () {\n\n  const {restaurants, dataFetched } = useContext(RestContext)\n  const [displayedRestaurants, setDisplayedRestaurants] = useState([])\n  \n\n\n  const chooseRandomRestaurants = amount => {\n    try{\n    const restaurantCount = restaurants.length;\n    const randomIndexes = GetRandomIndexes(restaurantCount, amount);\n    const randomRestaurants = randomIndexes.map(index => restaurants[index]);\n    setDisplayedRestaurants(randomRestaurants);\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n  }}\n\n  useEffect(() => {\n   chooseRandomRestaurants(4)\n},[dataFetched])\n  // useEffect(() => {\n  //   chooseRandomRestaurants(4);\n  // }, [chooseRandomRestaurants]);\n//is it better to call fetchBooks in app, or in context?\n  \n  const renderedList = displayedRestaurants.map ((rest) => {\n    console.log(rest.photos[0].html_attributions)\n    return <RestCard key = {rest.reference} rest = {rest}/>\n  })\n\n  return (\n    <div className=\"flex flex-wrap\">\n      {renderedList.length > 0 ? renderedList : \"Loading...\"}\n    </div>\n  )\n}\n\nexport default RestList"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACvD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,gBAAgB,MAAM,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,QAAQA,CAAA,EAAI;EAAAC,EAAA;EAEnB,MAAM;IAACC,WAAW;IAAEC;EAAY,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EAC3D,MAAM,CAACS,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAIpE,MAAMc,uBAAuB,GAAGC,MAAM,IAAI;IACxC,IAAG;MACH,MAAMC,eAAe,GAAGN,WAAW,CAACO,MAAM;MAC1C,MAAMC,aAAa,GAAGb,gBAAgB,CAACW,eAAe,EAAED,MAAM,CAAC;MAC/D,MAAMI,iBAAiB,GAAGD,aAAa,CAACE,GAAG,CAACC,KAAK,IAAIX,WAAW,CAACW,KAAK,CAAC,CAAC;MACxER,uBAAuB,CAACM,iBAAiB,CAAC;IAC1C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD;EAAC,CAAC;EAEFpB,SAAS,CAAC,MAAM;IACfY,uBAAuB,CAAC,CAAC,CAAC;EAC7B,CAAC,EAAC,CAACH,WAAW,CAAC,CAAC;EACd;EACA;EACA;EACF;;EAEE,MAAMa,YAAY,GAAGZ,oBAAoB,CAACQ,GAAG,CAAGK,IAAI,IAAK;IACvDF,OAAO,CAACG,GAAG,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,iBAAiB,CAAC;IAC7C,oBAAOrB,OAAA,CAACH,QAAQ;MAAwBqB,IAAI,EAAIA;IAAK,GAA7BA,IAAI,CAACI,SAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAAC;EACzD,CAAC,CAAC;EAEF,oBACE1B,OAAA;IAAK2B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BX,YAAY,CAACP,MAAM,GAAG,CAAC,GAAGO,YAAY,GAAG;EAAY;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAACxB,EAAA,CAnCQD,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAqCjB,eAAeA,QAAQ;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}