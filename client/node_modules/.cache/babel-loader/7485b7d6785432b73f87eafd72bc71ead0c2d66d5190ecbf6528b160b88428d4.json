{"ast":null,"code":"/* import { createContext, useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\n\n\nconst RestContext = createContext();\n\nfunction RestProvider({ children }) {\n\n  const [restaurants, setRestaurants] = useState([]);\n  const [dataFetched, setDataFetched] = useState(false);\n\n\n  const fetchRestaurants = useCallback(async() => {\n    try{\n    const res = await axios.get ('http://localhost:3001/restaurants')\n    await setDataFetched(true)\n    console.log(res)\n    setRestaurants(res.data);\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n  }},[])\n\n    \n    useEffect(() => {\n    fetchRestaurants();\n  }, [fetchRestaurants]);\n\n\n  //usecallback stellt sicher, dass die funktion nicht mit jedem rerender neu zugeordnet wird.\n\n\n  const valuesToShare = {\n    restaurants,\n    dataFetched\n  }\n\n  return (\n    <RestContext.Provider value={valuesToShare}>\n      {children}\n    </RestContext.Provider>\n  );\n}\n\nexport { RestProvider };\nexport default RestContext;\n\n */","map":{"version":3,"names":[],"sources":["/Users/felix/Projekte/Web-Dev/TechLabs/100-DIB/ss23-drop-in-to-berlin/dib/src/context/RestContext.js"],"sourcesContent":["/* import { createContext, useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\n\n\nconst RestContext = createContext();\n\nfunction RestProvider({ children }) {\n\n  const [restaurants, setRestaurants] = useState([]);\n  const [dataFetched, setDataFetched] = useState(false);\n\n\n  const fetchRestaurants = useCallback(async() => {\n    try{\n    const res = await axios.get ('http://localhost:3001/restaurants')\n    await setDataFetched(true)\n    console.log(res)\n    setRestaurants(res.data);\n    } catch (error) {\n      console.error('Error fetching restaurants:', error);\n  }},[])\n\n    \n    useEffect(() => {\n    fetchRestaurants();\n  }, [fetchRestaurants]);\n\n\n  //usecallback stellt sicher, dass die funktion nicht mit jedem rerender neu zugeordnet wird.\n\n\n  const valuesToShare = {\n    restaurants,\n    dataFetched\n  }\n\n  return (\n    <RestContext.Provider value={valuesToShare}>\n      {children}\n    </RestContext.Provider>\n  );\n}\n\nexport { RestProvider };\nexport default RestContext;\n\n */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}