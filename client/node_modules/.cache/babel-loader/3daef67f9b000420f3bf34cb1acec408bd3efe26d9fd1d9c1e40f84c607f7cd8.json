{"ast":null,"code":"function GetRandomIndexes(length, count) {\n  const indexes = [];\n  while (indexes.length < count) {\n    const randomIndex = Math.floor(Math.random() * length);\n    if (!indexes.includes(randomIndex)) {\n      indexes.push(randomIndex);\n    }\n  }\n  return indexes;\n}\n_c = GetRandomIndexes;\n;\nexport default GetRandomIndexes;\nvar _c;\n$RefreshReg$(_c, \"GetRandomIndexes\");","map":{"version":3,"names":["GetRandomIndexes","length","count","indexes","randomIndex","Math","floor","random","includes","push","_c","$RefreshReg$"],"sources":["/Users/felix/Projekte/Web-Dev/TechLabs/100-DIB/ss23-drop-in-to-berlin/client/src/util/GetRandomIndexes.js"],"sourcesContent":["function GetRandomIndexes (length, count) {\n  const indexes = [];\n  while (indexes.length < count) {\n    const randomIndex = Math.floor(Math.random() * length);\n    if (!indexes.includes(randomIndex)) {\n      indexes.push(randomIndex);\n    }\n  }\n  return indexes;\n};\n\nexport default GetRandomIndexes"],"mappings":"AAAA,SAASA,gBAAgBA,CAAEC,MAAM,EAAEC,KAAK,EAAE;EACxC,MAAMC,OAAO,GAAG,EAAE;EAClB,OAAOA,OAAO,CAACF,MAAM,GAAGC,KAAK,EAAE;IAC7B,MAAME,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,MAAM,CAAC;IACtD,IAAI,CAACE,OAAO,CAACK,QAAQ,CAACJ,WAAW,CAAC,EAAE;MAClCD,OAAO,CAACM,IAAI,CAACL,WAAW,CAAC;IAC3B;EACF;EACA,OAAOD,OAAO;AAChB;AAACO,EAAA,GATQV,gBAAgB;AASxB;AAED,eAAeA,gBAAgB;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}