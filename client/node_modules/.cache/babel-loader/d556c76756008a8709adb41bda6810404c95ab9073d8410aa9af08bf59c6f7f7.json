{"ast":null,"code":"/* import { useState, useEffect } from 'react';\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function (...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n}\n\n//what is the above doing?\n\nfunction SearchBar({onSearchChange, suggestions}) {\n\n    const [searchTerm, setSearchTerm] = useState('');\n    const [activeIndex, setActiveIndex] = useState(-1);\n\n    useEffect(() => {\n        const debouncedSearch = debounce(onSearchChange, 300); \n        if (searchTerm) {\n            debouncedSearch(searchTerm);\n            console.log ('debouncedSearch done')\n        } else {\n            onSearchChange('');\n            console.log('onSearchChange')\n        }\n    }, [onSearchChange, searchTerm, suggestions]);\n\n    const handleInputChange = (event) => {\n        setSearchTerm(event.target.value);\n        setActiveIndex(-1);\n    };\n\n    const handleSuggestionClick = (suggestion) => {\n        setSearchTerm(suggestion.name);\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'ArrowDown') {\n            setActiveIndex((prev) => Math.min(prev + 1, suggestions.length - 1));\n        } else if (e.key === 'ArrowUp') {\n            setActiveIndex((prev) => Math.max(prev - 1, 0));\n        } else if (e.key === 'Enter' && activeIndex >= 0) {\n            handleSuggestionClick(suggestions[activeIndex]);\n        }\n    console.log('keydown handled :', e.key)\n    };\n\n    console.log('search bar before return')\n    return (\n        <div className=\"relative bg-gray-100 p-2 rounded-lg\">\n            <input\n                type=\"text\"\n                placeholder=\"Search for restaurants...\"\n                value={searchTerm}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                className=\"px-4 py-2 w-full border-2 border-gray-300 bg-gray-100 rounded-lg focus:outline-none focus:border-black\"\n            />\n            {searchTerm && (\n                <ul className=\"absolute w-full mt-1 border-t-0 rounded-lg overflow-y-auto max-h-40 bg-white shadow-lg z-10 border-black border-2\">\n                    {suggestions.length > 0 ? (\n                        suggestions.map((suggestion, index) => (\n                            <li\n                                key={suggestion.id}\n                                onClick={() => handleSuggestionClick(suggestion)}\n                                className={`px-4 py-2 cursor-pointer hover:bg-gray-200 ${index === activeIndex ? 'bg-gray-300' : ''}`}\n                            >\n                                <span className=\"font-semibold\">{suggestion.name}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li className=\"px-4 py-2 font-semibold text-gray-500\">No matches found</li>\n                    )}\n                </ul>\n            )}\n        </div>\n    );\n}\n\nexport default SearchBar; */","map":{"version":3,"names":[],"sources":["/Users/felix/Projekte/Web-Dev/TechLabs/100-DIB/ss23-drop-in-to-berlin/dib/src/components/SearchBar.js"],"sourcesContent":["/* import { useState, useEffect } from 'react';\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function (...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n    };\n}\n\n//what is the above doing?\n\nfunction SearchBar({onSearchChange, suggestions}) {\n\n    const [searchTerm, setSearchTerm] = useState('');\n    const [activeIndex, setActiveIndex] = useState(-1);\n\n    useEffect(() => {\n        const debouncedSearch = debounce(onSearchChange, 300); \n        if (searchTerm) {\n            debouncedSearch(searchTerm);\n            console.log ('debouncedSearch done')\n        } else {\n            onSearchChange('');\n            console.log('onSearchChange')\n        }\n    }, [onSearchChange, searchTerm, suggestions]);\n\n    const handleInputChange = (event) => {\n        setSearchTerm(event.target.value);\n        setActiveIndex(-1);\n    };\n\n    const handleSuggestionClick = (suggestion) => {\n        setSearchTerm(suggestion.name);\n    };\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'ArrowDown') {\n            setActiveIndex((prev) => Math.min(prev + 1, suggestions.length - 1));\n        } else if (e.key === 'ArrowUp') {\n            setActiveIndex((prev) => Math.max(prev - 1, 0));\n        } else if (e.key === 'Enter' && activeIndex >= 0) {\n            handleSuggestionClick(suggestions[activeIndex]);\n        }\n    console.log('keydown handled :', e.key)\n    };\n\n    console.log('search bar before return')\n    return (\n        <div className=\"relative bg-gray-100 p-2 rounded-lg\">\n            <input\n                type=\"text\"\n                placeholder=\"Search for restaurants...\"\n                value={searchTerm}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                className=\"px-4 py-2 w-full border-2 border-gray-300 bg-gray-100 rounded-lg focus:outline-none focus:border-black\"\n            />\n            {searchTerm && (\n                <ul className=\"absolute w-full mt-1 border-t-0 rounded-lg overflow-y-auto max-h-40 bg-white shadow-lg z-10 border-black border-2\">\n                    {suggestions.length > 0 ? (\n                        suggestions.map((suggestion, index) => (\n                            <li\n                                key={suggestion.id}\n                                onClick={() => handleSuggestionClick(suggestion)}\n                                className={`px-4 py-2 cursor-pointer hover:bg-gray-200 ${index === activeIndex ? 'bg-gray-300' : ''}`}\n                            >\n                                <span className=\"font-semibold\">{suggestion.name}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li className=\"px-4 py-2 font-semibold text-gray-500\">No matches found</li>\n                    )}\n                </ul>\n            )}\n        </div>\n    );\n}\n\nexport default SearchBar; */"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}